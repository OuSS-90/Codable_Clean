//
//  AnimeListViewController.swift
//  Codable_Clean
//
//  Created by OuSS on 5/11/19.
//  Copyright (c) 2019 OuSS. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import JGProgressHUD

protocol AnimeListDisplayLogic: class
{
func displayAnimes(viewModel: Animes.List.ViewModel)
}

class AnimeListController: UITableViewController, AnimeListDisplayLogic
{
  var interactor: AnimeListBusinessLogic?
  var router: (NSObjectProtocol & AnimeListRoutingLogic & AnimeListDataPassing)?
  var animes = [Animes.Anime]()
    
  let cellId = "cellId"
  private let hud = JGProgressHUD(style: .dark)

  // MARK: Object lifecycle

   override init(style: UITableView.Style) {
    super.init(style: style)
    setup()
   }
  
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = AnimeListInteractor()
    let presenter = AnimeListPresenter()
    let router = AnimeListRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
    setupNavigationBar()
    setupTableView()
    getAnimes()
  }
  
    fileprivate func setupNavigationBar() {
        navigationItem.title = "Anime Season List"
    }
    
    fileprivate func setupTableView() {
        tableView.register(AnimeListCell.self, forCellReuseIdentifier: cellId)
        tableView.tableFooterView = UIView()
    }
    
  // MARK: Do something
  
  func getAnimes()
  {
    hud.textLabel.text = "Loading"
    guard let view = self.navigationController?.view else { return }
    hud.show(in: view)
    
    let request = Animes.List.Request()
    interactor?.getAnimes(request: request)
  }
  
  func displayAnimes(viewModel: Animes.List.ViewModel)
  {
    hud.dismiss()
    if let animes = viewModel.animes {
        self.animes = animes
        tableView.reloadData()
    }
  }
}

extension AnimeListController {
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return animes.count
    }
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 150
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: cellId, for: indexPath) as! AnimeListCell
        cell.anime = animes[indexPath.row]
        return cell
    }
    
    /*override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let animeController = DetailsAnimeController()
        animeController.animeViewModel = animes[indexPath.row]
        navigationController?.pushViewController(animeController, animated: true)
    }*/
}
